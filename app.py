'''
Goal of LSTM microservice:
1. LSTM microservice will accept the GitHub data from Flask microservice and will forecast the data for next 1 year based on past 30 days
2. It will also plot three different graph (i.e.  "Model Loss", "LSTM Generated Data", "All Issues Data") using matplot lib 
3. This graph will be stored as image in Google Cloud Storage.
4. The image URL are then returned back to Flask microservice.
'''
# Import all the required packages
from flask import Flask, jsonify, request, make_response
import os
from dateutil import *
from datetime import timedelta
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import time
from flask_cors import CORS

# -------- FB/PROPHET --------
from prophet import Prophet
# -----------------------------

# Import required storage package from Google Cloud Storage
from google.cloud import storage

# Initilize flask app
app = Flask(__name__)
# Handles CORS (cross-origin resource sharing)
CORS(app)
# Initlize Google cloud storage client
client = storage.Client()

# Add response headers to accept all types of  requests

def build_preflight_response():
    response = make_response()
    response.headers.add("Access-Control-Allow-Origin", "*")
    response.headers.add("Access-Control-Allow-Headers", "Content-Type")
    response.headers.add("Access-Control-Allow-Methods",
                         "PUT, GET, POST, DELETE, OPTIONS")
    return response

#  Modify response headers when returning to the origin

def build_actual_response(response):
    response.headers.set("Access-Control-Allow-Origin", "*")
    response.headers.set("Access-Control-Allow-Methods",
                         "PUT, GET, POST, DELETE, OPTIONS")
    return response

'''
API route path is  "/api/forecast"
This API will accept only POST request
'''

@app.route('/api/forecast', methods=['POST'])
def forecast():
    body = request.get_json()
    issues = body["issues"] # issues_reponse
    type = body["type"]     # "created_at"
    repo_name = body["repo"]    

    # 2. Create data frame
    
    data_frame = pd.DataFrame(issues)
    if type == "created_at" or type == "closed_at":
        df1 = data_frame.groupby([type], as_index=False).count()
        df = df1[[type, 'issue_number']]
    else:
        data_frame['y'] = 1
        df = data_frame.groupby([type], as_index=False).count()
    df.columns = ['ds', 'y']


    # 3. Instantiate new Prophet object and fit model - DONE
    model = Prophet()
    model.fit(df)

    # 4. Make future data frame and predict - DONE

    future = model.make_future_dataframe(periods=700)
    forecast = model.predict(future)


    '''
    Creating image URL
    BASE_IMAGE_PATH refers to Google Cloud Storage Bucket URL.Add your Base Image Path in line 145
    if you want to run the application local
    LOCAL_IMAGE_PATH refers local directory where the figures generated by matplotlib are stored
    These locally stored images will then be uploaded to Google Cloud Storage
    '''
    BASE_IMAGE_PATH = os.environ.get(
        'BASE_IMAGE_PATH', 'Your_Base_Image_path')
    # DO NOT DELETE "static/images" FOLDER as it is used to store figures/images generated by matplotlib
    LOCAL_IMAGE_PATH = "static/images/"

    # Creating the image path for model loss, LSTM generated image and all issues data image

    LSTM_GENERATED_IMAGE_NAME = "lstm_generated_data_" + type +"_" + repo_name + ".png"
    LSTM_GENERATED_URL = BASE_IMAGE_PATH + LSTM_GENERATED_IMAGE_NAME

    # -------- FB/PROPHET ---------
    FBPROPHET_GENERATED_IMAGE_NAME = "fbprophet_generated_data_" + type +"_" + repo_name + ".png"

    FBPROPHET_GENERATED_URL = BASE_IMAGE_PATH + FBPROPHET_GENERATED_IMAGE_NAME
    # -----------------------------


    # Add your unique Bucket Name if you want to run it local
    BUCKET_NAME = os.environ.get(
        'BUCKET_NAME', 'Your_BUCKET_NAME')

    # -------- FB/PROPHET ---------
    # 5. Plot forecast
    forecast_fig = model.plot(forecast)
    forecast_fig.legend()
    forecast_fig.set_title('FB Prophet Generated Data For ' + type)
    forecast_fig.set_xlabel('Time Steps')
    forecast_fig.set_ylabel('Issues')
    forecast_fig.savefig(LOCAL_IMAGE_PATH + FBPROPHET_GENERATED_IMAGE_NAME)
    # -----------------------------


    # Uploads an images into the google cloud storage bucket
    bucket = client.get_bucket(BUCKET_NAME)
    new_blob = bucket.blob(FBPROPHET_GENERATED_IMAGE_NAME)
    new_blob.upload_from_filename(
        filename=LOCAL_IMAGE_PATH + FBPROPHET_GENERATED_IMAGE_NAME)

    # Construct the response
    json_response = {
        "fbprophet_generated_image_url": FBPROPHET_GENERATED_URL,
    }
    # Returns image url back to flask microservice
    return jsonify(json_response)


# Run LSTM app server on port 8080
if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=8080)
